import { PATHS_URL, PLATFORMS, TESTING_PLATFORMS } from "@/constants";

type HostMapping = {
  [key: string]: ValueOf<typeof PLATFORMS>;
};

type VersionMapping = {
  [key: string]: ValueOf<typeof PLATFORMS>;
};

const hostMapping: HostMapping = {
  [PATHS_URL.LIFELINE]: PLATFORMS.MAIN,
  [PATHS_URL.WIC]: PLATFORMS.WIC,
  [PATHS_URL.SSI]: PLATFORMS.SSI,
  [PATHS_URL.MEDICAID]: PLATFORMS.MEDICAID,
  [PATHS_URL.SNAP]: PLATFORMS.SNAP,
  [PATHS_URL.EBT]: PLATFORMS.EBT,
  [PATHS_URL.CALIFORNIA]: PLATFORMS.CALIFORNIA,
  [PATHS_URL.MEDICAL]: PLATFORMS.MEDICAL,
  [PATHS_URL.CALFRESH]: PLATFORMS.CALFRESH,
  [PATHS_URL.BYOP]: PLATFORMS.BYOP_1W,
  [PATHS_URL.SIM]: PLATFORMS.SIM_1W,
  [PATHS_URL.TRIBAL]: PLATFORMS.TRIBAL,
  [PATHS_URL.GETLIFELINE]: PLATFORMS.GETLIFELINE,
  [PATHS_URL.GOVERNMENT_BENEFIT]: PLATFORMS.GOVERNMENT_BENEFIT,
  [PATHS_URL.TELECOM_ENROLLMENT_PARTNER]: PLATFORMS.TELECOM_ENROLLMENT_PARTNER,
  [PATHS_URL.TELECOM_PARTNER]: PLATFORMS.TELECOM_PARTNER,
  [PATHS_URL.HISPANIC]: PLATFORMS.HISPANIC,
  [PATHS_URL.INFINITI_MOBILE]: PLATFORMS.INFINITI_MOBILE,
};

const versionMapping: VersionMapping = {
  [TESTING_PLATFORMS.LIFELINE]: PLATFORMS.MAIN,
  [TESTING_PLATFORMS.WIC]: PLATFORMS.WIC,
  [TESTING_PLATFORMS.SSI]: PLATFORMS.SSI,
  [TESTING_PLATFORMS.MEDICAID]: PLATFORMS.MEDICAID,
  [TESTING_PLATFORMS.SNAP]: PLATFORMS.SNAP,
  [TESTING_PLATFORMS.EBT]: PLATFORMS.EBT,
  [TESTING_PLATFORMS.CALIFORNIA]: PLATFORMS.CALIFORNIA,
  [TESTING_PLATFORMS.MEDICAL]: PLATFORMS.MEDICAL,
  [TESTING_PLATFORMS.CALFRESH]: PLATFORMS.CALFRESH,
  [TESTING_PLATFORMS.BYOP_1W]: PLATFORMS.BYOP_1W,
  [TESTING_PLATFORMS.SIM_1W]: PLATFORMS.SIM_1W,
  [TESTING_PLATFORMS.TRIBAL]: PLATFORMS.TRIBAL,
  [TESTING_PLATFORMS.GETLIFELINE]: PLATFORMS.GETLIFELINE,
  [TESTING_PLATFORMS.GOVERNMENT_BENEFIT]: PLATFORMS.GOVERNMENT_BENEFIT,
  [TESTING_PLATFORMS.TELECOM_ENROLLMENT_PARTNER]:
    PLATFORMS.TELECOM_ENROLLMENT_PARTNER,
  [TESTING_PLATFORMS.TELECOM_PARTNER]: PLATFORMS.TELECOM_PARTNER,
  [TESTING_PLATFORMS.HISPANIC]: PLATFORMS.HISPANIC,
  [TESTING_PLATFORMS.INFINITI_MOBILE]: PLATFORMS.INFINITI_MOBILE,
};

const determineLPVariantByVersion = (version: string) => {
  return versionMapping[version];
};

export type ValueOf<T> = Required<T>[keyof T];

const determineLPVariantByHost = (host: string) => {
  let variant: ValueOf<typeof PLATFORMS> = PLATFORMS.MAIN; // Set the default fallback value
  for (const [path, value] of Object.entries(hostMapping)) {
    if (host.includes(path)) {
      variant = value;
      break; // Stop checking once a match is found
    }
  }
  return variant;
};

export const determineLPVariant = (host: string, version: string) => {
  let variant = determineLPVariantByHost(host);
  if (version) variant = determineLPVariantByVersion(version);
  if (!variant) {
    variant = PLATFORMS.A_MAIN;
  }
  return variant;
};
